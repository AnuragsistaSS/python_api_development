import pytest
from app import schema
from app import models

@pytest.fixture
def test_vote(tests_posts,session,test_user):
    new_vote = models.Vote(post_id=tests_posts[0].id, user_id=test_user.id, vote=1)
    session.add(new_vote)
    session.commit()
def test_add_vote(authorized_client, tests_posts,test_user):
    res = authorized_client.post('/vote', json={'post_id': tests_posts[0].id, 'vote': 1})
    assert res.status_code == 201

def test_delete_vote(authorized_client, tests_posts,test_user,test_vote):
    res = authorized_client.post('/vote', json={'post_id': tests_posts[0].id, 'vote': 0})
    assert res.status_code == 201

def test_add_same_vote(authorized_client, tests_posts,test_user,test_vote):
    res = authorized_client.post('/vote', json={'post_id': tests_posts[0].id, 'vote': 1})
    assert res.status_code == 400

def test_delete_non_existent_vote(authorized_client, tests_posts):
    res = authorized_client.post('/vote', json={'post_id': tests_posts[0].id, 'vote': 0})
    assert res.status_code == 400

def test_vote_post_not_found(authorized_client):
    res = authorized_client.post('/vote', json={'post_id': 100, 'vote': 1})
    assert res.status_code == 404

def test_vote_unauthorized(client, tests_posts):
    res = client.post('/vote', json={'post_id': tests_posts[0].id, 'vote': 1})
    assert res.status_code == 401
